var search_data = {"index":{"searchIndex":["methadone","cli","clilogger","clilogging","cucumber","error","executionstrategy","base","jvm","mri","open_3","open_4","rbxopen_4","exitnow","failedcommanderror","main","optionparserproxy","processstatus","sh","object","add_to_file()","arg()","arg()","banner=()","change_logger()","check_and_prepare_basedir!()","check_args!()","copy_file()","debug()","defaults_from_config_file()","defaults_from_env_var()","description()","description()","doc()","error()","error_formatter=()","error_level=()","exception_meaning_command_not_found()","exception_meaning_command_not_found()","exception_meaning_command_not_found()","exception_meaning_command_not_found()","exit_now!()","fatal()","gemspec()","go!()","help_now!()","included()","included()","included()","included()","info()","leak_exceptions()","level=()","logger()","logger=()","main()","method_missing()","method_missing()","new()","new()","new()","new()","new()","on()","on()","options()","opts()","post_setup()","render_license_partial()","run_command()","run_command()","run_command()","run_command()","run_command()","set_execution_strategy()","set_sh_logger()","sh()","sh!()","subclass_must_implement!()","success?()","template_dir()","template_dirs_in()","use_log_level_option()","version()","version()","warn()","readme"],"longSearchIndex":["methadone","methadone::cli","methadone::clilogger","methadone::clilogging","methadone::cucumber","methadone::error","methadone::executionstrategy","methadone::executionstrategy::base","methadone::executionstrategy::jvm","methadone::executionstrategy::mri","methadone::executionstrategy::open_3","methadone::executionstrategy::open_4","methadone::executionstrategy::rbxopen_4","methadone::exitnow","methadone::failedcommanderror","methadone::main","methadone::optionparserproxy","methadone::processstatus","methadone::sh","object","methadone::cli#add_to_file()","methadone::main#arg()","methadone::optionparserproxy#arg()","methadone::optionparserproxy#banner=()","methadone::clilogging#change_logger()","methadone::cli#check_and_prepare_basedir!()","methadone::optionparserproxy#check_args!()","methadone::cli#copy_file()","methadone::clilogging#debug()","methadone::main#defaults_from_config_file()","methadone::main#defaults_from_env_var()","methadone::main#description()","methadone::optionparserproxy#description()","object#doc()","methadone::clilogging#error()","methadone::clilogger#error_formatter=()","methadone::clilogger#error_level=()","methadone::executionstrategy::base#exception_meaning_command_not_found()","methadone::executionstrategy::jvm#exception_meaning_command_not_found()","methadone::executionstrategy::mri#exception_meaning_command_not_found()","methadone::executionstrategy::rbxopen_4#exception_meaning_command_not_found()","methadone::exitnow#exit_now!()","methadone::clilogging#fatal()","methadone::cli#gemspec()","methadone::main#go!()","methadone::exitnow#help_now!()","methadone::clilogging::included()","methadone::exitnow::included()","methadone::main::included()","methadone::sh::included()","methadone::clilogging#info()","methadone::main#leak_exceptions()","methadone::clilogger#level=()","methadone::clilogging#logger()","methadone::clilogging#logger=()","methadone::main#main()","methadone::optionparserproxy#method_missing()","object#method_missing()","methadone::clilogger::new()","methadone::error::new()","methadone::failedcommanderror::new()","methadone::optionparserproxy::new()","methadone::processstatus::new()","methadone::main#on()","methadone::optionparserproxy#on()","methadone::main#options()","methadone::main#opts()","methadone::optionparserproxy#post_setup()","methadone::cli#render_license_partial()","methadone::executionstrategy::base#run_command()","methadone::executionstrategy::jvm#run_command()","methadone::executionstrategy::mri#run_command()","methadone::executionstrategy::open_3#run_command()","methadone::executionstrategy::open_4#run_command()","methadone::sh#set_execution_strategy()","methadone::sh#set_sh_logger()","methadone::sh#sh()","methadone::sh#sh!()","methadone::executionstrategy::base#subclass_must_implement!()","methadone::processstatus#success?()","methadone::cli#template_dir()","methadone::cli#template_dirs_in()","methadone::clilogging#use_log_level_option()","methadone::main#version()","methadone::optionparserproxy#version()","methadone::clilogging#warn()",""],"info":[["Methadone","","classes/Methadone.html","",""],["Methadone::CLI","","classes/Methadone/CLI.html","","<p><strong>Methadone Internal - treat as private</strong>\n<p>Stuff to implement methadone&#39;s CLI app.  These stuff isn&#39;t ...\n"],["Methadone::CLILogger","","classes/Methadone/CLILogger.html","","<p>A Logger instance that gives better control of messaging the user and\nlogging app activity.  At it&#39;s ...\n"],["Methadone::CLILogging","","classes/Methadone/CLILogging.html","","<p>Provides easier access to a shared Methadone::CLILogger instance.\n<p>Include this module into your class, ...\n"],["Methadone::Cucumber","","classes/Methadone/Cucumber.html","","<p>By <code>require</code>&#39;ing <code>methadone/cucumber</code> in your\nCucumber setup (e.g. in <code>env.rb</code>), you gain access to the ...\n"],["Methadone::Error","","classes/Methadone/Error.html","","<p>Standard exception you can throw to exit with a given  status code.\nGenerally, you should prefer Methadone::Main#exit_now! ...\n"],["Methadone::ExecutionStrategy","","classes/Methadone/ExecutionStrategy.html","",""],["Methadone::ExecutionStrategy::Base","","classes/Methadone/ExecutionStrategy/Base.html","","<p>Base for any ExecutionStrategy implementation.  Currently, this is nothing\nmore than an interface specification. ...\n"],["Methadone::ExecutionStrategy::JVM","","classes/Methadone/ExecutionStrategy/JVM.html","","<p><strong>Methadone Internal - treat as private</strong>\n<p>Methadone::ExecutionStrategy for the JVM that uses JVM classes to ...\n"],["Methadone::ExecutionStrategy::MRI","","classes/Methadone/ExecutionStrategy/MRI.html","","<p><strong>Methadone Internal - treat as private</strong>\n<p>Base strategy for MRI rubies.\n"],["Methadone::ExecutionStrategy::Open_3","","classes/Methadone/ExecutionStrategy/Open_3.html","","<p><strong>Methadone Internal - treat as private</strong>\n<p>Implementation for modern Rubies that uses the built-in Open3 library ...\n"],["Methadone::ExecutionStrategy::Open_4","","classes/Methadone/ExecutionStrategy/Open_4.html","","<p><strong>Methadone Internal - treat as private</strong>\n<p>ExecutionStrategy for non-modern Rubies that must rely on Open4 ...\n"],["Methadone::ExecutionStrategy::RBXOpen_4","","classes/Methadone/ExecutionStrategy/RBXOpen_4.html","","<p><strong>Methadone Internal - treat as private</strong>\n<p>For RBX; it throws a different exception when a command isn&#39;t ...\n"],["Methadone::ExitNow","","classes/Methadone/ExitNow.html","","<p>Provides #exit_now! and #help_now!.  You might mix this into your business\nlogic classes if they will ...\n"],["Methadone::FailedCommandError","","classes/Methadone/FailedCommandError.html","","<p>Thrown by certain methods when an externally-called command exits nonzero\n"],["Methadone::Main","","classes/Methadone/Main.html","","<p>Include this module to gain access to the \"canonical command-line app\nstructure\" DSL.  This ...\n"],["Methadone::OptionParserProxy","","classes/Methadone/OptionParserProxy.html","","<p><strong>Methadone Internal - treat as private</strong>\n<p>A proxy to OptionParser that intercepts #on so that we can allow ...\n"],["Methadone::ProcessStatus","","classes/Methadone/ProcessStatus.html","","<p><strong>Methadone Internal - treat as private</strong>\n<p>A wrapper/enhancement of Process::Status that handles coersion and ...\n"],["Methadone::SH","","classes/Methadone/SH.html","","<p>Module with various helper methods for executing external commands. In most\ncases, you can use #sh to ...\n"],["Object","","classes/Object.html","",""],["add_to_file","Methadone::CLI","classes/Methadone/CLI.html#method-i-add_to_file","(file,lines,options = {})","<p>Add content to a file\n<p><code>file</code> &mdash; path to the file\n<p><code>lines</code> &mdash; Array of String representing the lines to add\n"],["arg","Methadone::Main","classes/Methadone/Main.html#method-i-arg","(arg_name,*options)","<p>Sets the name of an arguments your app accepts.  Note that no sanity\nchecking is done on the configuration ...\n"],["arg","Methadone::OptionParserProxy","classes/Methadone/OptionParserProxy.html#method-i-arg","(arg_name,*options)","<p>Sets the banner to include these arg names\n"],["banner=","Methadone::OptionParserProxy","classes/Methadone/OptionParserProxy.html#method-i-banner-3D","(new_banner)","<p>Proxies to underlying OptionParser\n"],["change_logger","Methadone::CLILogging","classes/Methadone/CLILogging.html#method-i-change_logger","(new_logger)","<p>Change the global logger that includers will use.  Useful if you don&#39;t\nwant the default configured ...\n"],["check_and_prepare_basedir!","Methadone::CLI","classes/Methadone/CLI.html#method-i-check_and_prepare_basedir-21","(basedir,force)","<p>Checks that the basedir can be used, either by not existing, or by existing\nand force is true. In that ...\n"],["check_args!","Methadone::OptionParserProxy","classes/Methadone/OptionParserProxy.html#method-i-check_args-21","()",""],["copy_file","Methadone::CLI","classes/Methadone/CLI.html#method-i-copy_file","(relative_path,options = {})","<p>Copies a file, running it through ERB\n<p><code>relative_path</code> &mdash; path to the file, relative to the project root, minus ...\n"],["debug","Methadone::CLILogging","classes/Methadone/CLILogging.html#method-i-debug","(progname = nil, &block)","<p>pass-through to <code>logger.debug(progname,&amp;block)</code>\n"],["defaults_from_config_file","Methadone::Main","classes/Methadone/Main.html#method-i-defaults_from_config_file","(filename,options={})","<p>Set the name of the file, in the user&#39;s home directory, where defaults\ncan be configured. The format ...\n"],["defaults_from_env_var","Methadone::Main","classes/Methadone/Main.html#method-i-defaults_from_env_var","(env_var)","<p>Set the name of the environment variable where users can place default\noptions for your app.  Omit this ...\n"],["description","Methadone::Main","classes/Methadone/Main.html#method-i-description","(desc)","<p>Set the description of your app for inclusion in the help output.\n<p><code>desc</code> &mdash; a short, one-line description of ...\n\n"],["description","Methadone::OptionParserProxy","classes/Methadone/OptionParserProxy.html#method-i-description","(desc)",""],["doc","Object","classes/Object.html#method-i-doc","(type,regexp,&block)",""],["error","Methadone::CLILogging","classes/Methadone/CLILogging.html#method-i-error","(progname = nil, &block)","<p>pass-through to <code>logger.error(progname,&amp;block)</code>\n"],["error_formatter=","Methadone::CLILogger","classes/Methadone/CLILogger.html#method-i-error_formatter-3D","(formatter)","<p>Overrides the formatter for the error logger.  A future call to #formatter=\nwill affect both, so the ...\n"],["error_level=","Methadone::CLILogger","classes/Methadone/CLILogger.html#method-i-error_level-3D","(level)","<p>Set the threshold for what messages go to the error device.  Note that\ncalling #level= will <strong>not</strong> affect ...\n"],["exception_meaning_command_not_found","Methadone::ExecutionStrategy::Base","classes/Methadone/ExecutionStrategy/Base.html#method-i-exception_meaning_command_not_found","()","<p>Returns the class that, if caught by calling #run_command, represents the\nunderlying command not existing. ...\n"],["exception_meaning_command_not_found","Methadone::ExecutionStrategy::JVM","classes/Methadone/ExecutionStrategy/JVM.html#method-i-exception_meaning_command_not_found","()",""],["exception_meaning_command_not_found","Methadone::ExecutionStrategy::MRI","classes/Methadone/ExecutionStrategy/MRI.html#method-i-exception_meaning_command_not_found","()",""],["exception_meaning_command_not_found","Methadone::ExecutionStrategy::RBXOpen_4","classes/Methadone/ExecutionStrategy/RBXOpen_4.html#method-i-exception_meaning_command_not_found","()",""],["exit_now!","Methadone::ExitNow","classes/Methadone/ExitNow.html#method-i-exit_now-21","(exit_code,message=nil)","<p>Call this to exit the program immediately with the given error code and\nmessage.\n<p><code>exit_code</code> &mdash; exit status ...\n"],["fatal","Methadone::CLILogging","classes/Methadone/CLILogging.html#method-i-fatal","(progname = nil, &block)","<p>pass-through to <code>logger.fatal(progname,&amp;block)</code>\n"],["gemspec","Methadone::CLI","classes/Methadone/CLI.html#method-i-gemspec","()",""],["go!","Methadone::Main","classes/Methadone/Main.html#method-i-go-21","()","<p>Start your command-line app, exiting appropriately when complete.\n<p>This <strong>will</strong> exit your program when it ...\n"],["help_now!","Methadone::ExitNow","classes/Methadone/ExitNow.html#method-i-help_now-21","(message)","<p>Exit the program as if the user made an error invoking your app, providing\nthem the message as well as ...\n"],["included","Methadone::CLILogging","classes/Methadone/CLILogging.html#method-c-included","(k)",""],["included","Methadone::ExitNow","classes/Methadone/ExitNow.html#method-c-included","(k)",""],["included","Methadone::Main","classes/Methadone/Main.html#method-c-included","(k)",""],["included","Methadone::SH","classes/Methadone/SH.html#method-c-included","(k)",""],["info","Methadone::CLILogging","classes/Methadone/CLILogging.html#method-i-info","(progname = nil, &block)","<p>pass-through to <code>logger.info(progname,&amp;block)</code>\n"],["leak_exceptions","Methadone::Main","classes/Methadone/Main.html#method-i-leak_exceptions","(leak)","<p>Configure the auto-handling of StandardError exceptions caught from calling\ngo!.\n<p>leak &mdash; if true, go! will ...\n\n"],["level=","Methadone::CLILogger","classes/Methadone/CLILogger.html#method-i-level-3D","(level)",""],["logger","Methadone::CLILogging","classes/Methadone/CLILogging.html#method-i-logger","()","<p>Access the shared logger.  All classes that include this module will get\nthe same logger via this method. ...\n"],["logger=","Methadone::CLILogging","classes/Methadone/CLILogging.html#method-i-logger-3D","(new_logger)",""],["main","Methadone::Main","classes/Methadone/Main.html#method-i-main","(&block)","<p>Declare the main method for your app. This allows you to specify the\ngeneral logic of your app at the ...\n"],["method_missing","Methadone::OptionParserProxy","classes/Methadone/OptionParserProxy.html#method-i-method_missing","(sym,*args,&block)","<p>Defers all calls save #on to  the underlying OptionParser instance\n"],["method_missing","Object","classes/Object.html#method-i-method_missing","(sym,*args,&block)",""],["new","Methadone::CLILogger","classes/Methadone/CLILogger.html#method-c-new","(log_device=$stdout,error_device=$stderr)","<p>A logger that logs error-type messages to a second device; useful for\nensuring that error messages go ...\n"],["new","Methadone::Error","classes/Methadone/Error.html#method-c-new","(exit_code,message=nil)","<p>Create an Error with the given status code and message\n"],["new","Methadone::FailedCommandError","classes/Methadone/FailedCommandError.html#method-c-new","(exit_code,command,custom_error_message = nil)","<p>exit_code &mdash; exit code of the command that caused this\n<p>command &mdash; the entire command-line that caused this\n<p>custom_error_message ... &mdash; "],["new","Methadone::OptionParserProxy","classes/Methadone/OptionParserProxy.html#method-c-new","(option_parser,options)","<p>Create the proxy\n<p><code>option_parser</code> &mdash; An OptionParser instance\n<p><code>options</code> &mdash; a hash that will store the options set ...\n"],["new","Methadone::ProcessStatus","classes/Methadone/ProcessStatus.html#method-c-new","(status,expected)","<p>Create the ProcessStatus with the given status.\n<p>status &mdash; if this responds to #exitstatus, that method is ...\n"],["on","Methadone::Main","classes/Methadone/Main.html#method-i-on","(*args,&block)","<p>Calls the <code>on</code> method of #opts with the given arguments (see\nRDoc for #opts for the additional help provided). ...\n"],["on","Methadone::OptionParserProxy","classes/Methadone/OptionParserProxy.html#method-i-on","(*args,&block)","<p>If invoked as with OptionParser, behaves the exact same way. If invoked\nwithout a block, however, the ...\n"],["options","Methadone::Main","classes/Methadone/Main.html#method-i-options","()","<p>Returns a Hash that you can use to store or retrieve options parsed from\nthe command line.  When you ...\n"],["opts","Methadone::Main","classes/Methadone/Main.html#method-i-opts","()","<p>Returns an OptionParser that you can use to declare your command-line\ninterface.  Generally, you won&#39;t ...\n"],["post_setup","Methadone::OptionParserProxy","classes/Methadone/OptionParserProxy.html#method-i-post_setup","()","<p>We need some documentation to appear at the end, after all OptionParser\nsetup has occured, but before ...\n"],["render_license_partial","Methadone::CLI","classes/Methadone/CLI.html#method-i-render_license_partial","(partial)",""],["run_command","Methadone::ExecutionStrategy::Base","classes/Methadone/ExecutionStrategy/Base.html#method-i-run_command","(command)","<p>Executes the command and returns the results back.  This should do no\nlogging or other logic other than ...\n"],["run_command","Methadone::ExecutionStrategy::JVM","classes/Methadone/ExecutionStrategy/JVM.html#method-i-run_command","(command)",""],["run_command","Methadone::ExecutionStrategy::MRI","classes/Methadone/ExecutionStrategy/MRI.html#method-i-run_command","(command)",""],["run_command","Methadone::ExecutionStrategy::Open_3","classes/Methadone/ExecutionStrategy/Open_3.html#method-i-run_command","(command)",""],["run_command","Methadone::ExecutionStrategy::Open_4","classes/Methadone/ExecutionStrategy/Open_4.html#method-i-run_command","(command)",""],["set_execution_strategy","Methadone::SH","classes/Methadone/SH.html#method-i-set_execution_strategy","(strategy)","<p>Set the strategy to use for executing commands.  In general, you don&#39;t\nneed to set this since this ...\n"],["set_sh_logger","Methadone::SH","classes/Methadone/SH.html#method-i-set_sh_logger","(logger)","<p>Override the default logger (which is the one provided by CLILogging). You\nwould do this if you want ...\n"],["sh","Methadone::SH","classes/Methadone/SH.html#method-i-sh","(command,options={},&block)","<p>Run a shell command, capturing and logging its output. If the command\ncompleted successfully, it&#39;s ...\n"],["sh!","Methadone::SH","classes/Methadone/SH.html#method-i-sh-21","(command,options={},&block)","<p>Run a command, throwing an exception if the command exited nonzero.\nOtherwise, behaves exactly like  ...\n"],["subclass_must_implement!","Methadone::ExecutionStrategy::Base","classes/Methadone/ExecutionStrategy/Base.html#method-i-subclass_must_implement-21","()",""],["success?","Methadone::ProcessStatus","classes/Methadone/ProcessStatus.html#method-i-success-3F","()","<p>True if the exit status was a successul (i.e. expected) one.\n"],["template_dir","Methadone::CLI","classes/Methadone/CLI.html#method-i-template_dir","(from)","<p>Get the location of the templates for profile \"from\"\n"],["template_dirs_in","Methadone::CLI","classes/Methadone/CLI.html#method-i-template_dirs_in","(profile)",""],["use_log_level_option","Methadone::CLILogging","classes/Methadone/CLILogging.html#method-i-use_log_level_option","(args = {})","<p>Call this <strong>if</strong> you&#39;ve included Methadone::Main to set up\na <code>--log-level</code> option for your app that will ...\n"],["version","Methadone::Main","classes/Methadone/Main.html#method-i-version","(version,version_options={})","<p>Set the version of your app so it appears in the banner.  This also adds\n--version as an option to your ...\n"],["version","Methadone::OptionParserProxy","classes/Methadone/OptionParserProxy.html#method-i-version","(version)","<p>Sets the version for the banner\n"],["warn","Methadone::CLILogging","classes/Methadone/CLILogging.html#method-i-warn","(progname = nil, &block)","<p>pass-through to <code>logger.warn(progname,&amp;block)</code>\n"],["README","","files/README_rdoc.html","","<p>Methadone - kick the bash habit and start your command line apps off right\n<p>Author &mdash; Dave Copeland (davetron5000 ...\n"]]}}